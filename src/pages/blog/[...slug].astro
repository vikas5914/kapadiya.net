---
import { getEntry, render } from "astro:content";
import { type CollectionEntry, getCollection } from "astro:content";

import Base from "../../layouts/Base.astro";
import { metaData } from "../../config";
import { excerpt } from "@lib/util/excerpt";

import FormattedDate from "@components/FormattedDate.astro";
import CustomMdx from "@components/Mdx.astro";

const { url, site } = Astro;

const { slug } = Astro.params;

if (slug === undefined) {
  return Astro.redirect("/404");
}

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { slug: post.id },
    props: post,
  }));
}

type Props = CollectionEntry<"posts">;

const post = Astro.props;
// 3. Redirect if the entry does not exist
if (post === undefined) {
  return Astro.redirect("/404");
}
---

<Base title={post.data.title} description={post.id} image={post.data?.cover}>
  <section>
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "BlogPosting",
        headline: post.data.title,
        datePublished: post.data.publishedAt,
        dateModified: post.data.publishedAt,
        description: excerpt(post.body),
        image: url.href,
        url: url,
        author: {
          "@type": "Person",
          name: metaData.name,
        },
      })}
    />
    <h1 class="title mb-3 font-medium text-2xl tracking-tight">
      {post.data.title}
    </h1>
    <div class="flex justify-between items-center mt-2 text-medium">
      <p class="text-sm text-neutral-600 dark:text-neutral-400">
        <FormattedDate date={post.data.publishedAt} includeRelative={false} />
      </p>
    </div>
    <article class="prose prose-quoteless dark:prose-invert prose-table">
      <CustomMdx content={post.body} />
    </article>
  </section>
</Base>
